<?php
/**
 * products.handler.php
 *
 * CRUD for listings
 * Table:
 *  listings(
 *    Listing_ID uuid pk,
 *    Vendor_ID uuid,
 *    Categories_ID uuid,
 *    Title varchar(256),
 *    Description text,
 *    Category varchar(100),
 *    Price real,
 *    Quantity int,
 *    Is_Active boolean,
 *    Publish_Date date,
 *    Item_Image varchar(256)
 *  )
 */

// CRITICAL: Prevent PHP errors from being displayed as HTML
error_reporting(E_ALL);
ini_set('display_errors', 0);  // Don't display errors to browser
ini_set('log_errors', 1);      // Log errors instead

// Define constant to preserve output buffering in bootstrap
define('KEEP_OUTPUT_BUFFER', true);

// Start output buffering to catch any unexpected output
ob_start();

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Clean any output that might have been generated by includes
ob_clean();

// Detect if this is an AJAX request or regular form submission
$isAjaxRequest = !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && 
                 strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest';

// Only set JSON header for AJAX requests
if ($isAjaxRequest) {
    header('Content-Type: application/json');
}

if (!isset($_SESSION['user'])) {
    http_response_code(401);
    if ($isAjaxRequest) {
        echo json_encode(['success' => false, 'message' => 'Unauthorized']);
    } else {
        header('Location: /pages/login/');
    }
    exit;
}

require_once __DIR__ . '/../bootstrap.php';
require_once UTILS_PATH . '/DatabaseService.util.php';

// Validate database connection
try {
    $db = DatabaseService::getInstance()->getConnection();
    if (!$db) {
        throw new Exception('Database connection failed');
    }
} catch (Exception $e) {
    error_log('Database connection error: ' . $e->getMessage());
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'Database connection failed. Please try again later.']);
    exit;
}
$userId = $_SESSION['user']['user_id']; // assumes UUID

$method = $_SERVER['REQUEST_METHOD'];
$action = $_REQUEST['action'] ?? ''; // works for both GET/POST/DELETE with query/string

// Enhanced debugging for create/update detection
error_log("üì® REQUEST DEBUG:");
error_log("- Method: {$method}");
error_log("- Action: '{$action}'");
error_log("- POST data: " . json_encode($_POST));
error_log("- Has 'id' in POST: " . (isset($_POST['id']) ? 'YES (' . $_POST['id'] . ')' : 'NO'));

/**
 * Unified response handler for both AJAX and regular form submissions
 */
function sendResponse(array $response, bool $isAjaxRequest): void
{
    if ($isAjaxRequest) {
        // AJAX request - send JSON response
        if (!headers_sent()) {
            header('Content-Type: application/json');
            echo json_encode($response);
        }
    } else {
        // Regular form submission - redirect based on success/failure
        $redirectTo = $_POST['redirect_to'] ?? '/pages/account/index.php';
        
        if ($response['success']) {
            // Success - redirect to account page with success message
            $message = urlencode($response['message'] ?? 'Operation completed successfully');
            
            // Check if redirectTo already has query parameters
            if (strpos($redirectTo, '?') !== false) {
                // Already has query parameters, use & to append
                $redirectUrl = $redirectTo . '&success=' . $message;
            } else {
                // No query parameters, use ? to start
                $redirectUrl = $redirectTo . '?success=' . $message;
            }
            
            error_log("‚úÖ SUCCESS: Redirecting to {$redirectUrl}");
            
            if (!headers_sent()) {
                header("Location: {$redirectUrl}");
                exit;
            } else {
                // Fallback if headers already sent
                echo "<script>window.location.href = '{$redirectUrl}';</script>";
                echo "<meta http-equiv='refresh' content='0;url={$redirectUrl}'>";
                exit;
            }
        } else {
            // Failure - redirect back with error message
            $message = urlencode($response['message'] ?? 'An error occurred');
            
            // Check if redirectTo already has query parameters
            if (strpos($redirectTo, '?') !== false) {
                // Already has query parameters, use & to append
                $redirectUrl = $redirectTo . '&error=' . $message;
            } else {
                // No query parameters, use ? to start
                $redirectUrl = $redirectTo . '?error=' . $message;
            }
            
            error_log("‚ùå ERROR: Redirecting to {$redirectUrl}");
            
            if (!headers_sent()) {
                header("Location: {$redirectUrl}");
                exit;
            } else {
                // Fallback if headers already sent
                echo "<script>window.location.href = '{$redirectUrl}';</script>";
                echo "<meta http-equiv='refresh' content='0;url={$redirectUrl}'>";
                exit;
            }
        }
    }
}

try {
    switch ($method) {
        case 'GET':
            // read or list
            if ($action === 'read') {
                $id = $_GET['id'] ?? null;
                if (!$id) throw new Exception('Missing id');
                $result = readProduct($db, $id, $userId);
                sendResponse($result, $isAjaxRequest);
            } else {
                // default: list
                $result = listProducts($db, $userId);
                sendResponse($result, $isAjaxRequest);
            }
            break;

        case 'POST':
            // create or update or toggle/duplicate
            if ($action === 'create') {
                error_log("üÜï Handling CREATE action");
                $result = createProduct($db, $userId);
                sendResponse($result, $isAjaxRequest);
            } elseif ($action === 'update') {
                error_log("‚úèÔ∏è Handling UPDATE action");
                $result = updateProduct($db, $userId);
                sendResponse($result, $isAjaxRequest);
            } elseif ($action === 'toggle') {
                $result = toggleProduct($db, $userId);
                sendResponse($result, $isAjaxRequest);
            } elseif ($action === 'duplicate') {
                $result = duplicateProduct($db, $userId);
                sendResponse($result, $isAjaxRequest);
            } else {
                // FALLBACK: If no action is specified but we have POST data, try to determine intent
                $hasId = !empty($_POST['id']);
                error_log("‚ö†Ô∏è No action specified. Has ID: " . ($hasId ? 'YES' : 'NO'));
                
                if ($hasId) {
                    error_log("üîÑ FALLBACK: Treating as UPDATE");
                    $result = updateProduct($db, $userId);
                    sendResponse($result, $isAjaxRequest);
                } else {
                    error_log("üîÑ FALLBACK: Treating as CREATE");
                    $result = createProduct($db, $userId);
                    sendResponse($result, $isAjaxRequest);
                }
            }
            break;

        case 'DELETE':
            // delete
            parse_str(file_get_contents('php://input'), $body);
            $id = $body['id'] ?? $_GET['id'] ?? null;
            if (!$id) throw new Exception('Missing id');
            $result = deleteProduct($db, $id, $userId);
            sendResponse($result, $isAjaxRequest);
            break;

        default:
            http_response_code(405);
            sendResponse(['success' => false, 'message' => 'Method not allowed'], $isAjaxRequest);
    }
} catch (Exception $e) {
    // Clean any output that might have been generated before the error
    if (ob_get_level()) {
        ob_clean();
    }

    error_log('Products handler error: ' . $e->getMessage());
    error_log('Stack trace: ' . $e->getTraceAsString());

    http_response_code(400);

    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => $e->getMessage()]);
    exit;
}

// Ensure output buffering is ended cleanly
if (ob_get_level()) {
    ob_end_flush();
}

/* ============ HELPERS ============ */

function createProduct(PDO $db, string $vendorId): array
{
    error_log("üÜï Creating new product for vendor: {$vendorId}");
    error_log("üìä Raw POST data: " . json_encode($_POST));
    
    // Expect multipart/form-data
    $title        = trim($_POST['title'] ?? '');
    $description  = trim($_POST['description'] ?? '');
    $category     = trim($_POST['category'] ?? '');
    $price        = $_POST['price'] ?? null;
    $quantity     = $_POST['stock'] ?? $_POST['quantity'] ?? null; // your JS used "stock"
    $categoriesId = $_POST['categories_id'] ?? null; // you can pass it; else resolve from "category"
    
    // Fix boolean handling for status - default to active if not provided or empty
    $statusValue = $_POST['status'] ?? 'active';
    $status = ($statusValue === 'active' || $statusValue === '1' || $statusValue === 'true' || empty($statusValue));
    
    $publishDate  = date('Y-m-d'); // now
    
    // Log received data for debugging
    error_log("üìã Parsed product data:");
    error_log("- Title: '{$title}' (length: " . strlen($title) . ")");
    error_log("- Description: '{$description}' (length: " . strlen($description) . ")");
    error_log("- Category: '{$category}' (length: " . strlen($category) . ")");
    error_log("- Price: '{$price}' (type: " . gettype($price) . ")");
    error_log("- Quantity: '{$quantity}' (type: " . gettype($quantity) . ")");
    error_log("- Status raw: '" . ($_POST['status'] ?? 'NOT_SET') . "'");
    error_log("- Status processed: " . ($status ? 'true' : 'false') . " (boolean)");

    if ($title === '' || $description === '' || $category === '') {
        $missing = [];
        if ($title === '') $missing[] = 'title';
        if ($description === '') $missing[] = 'description';
        if ($category === '') $missing[] = 'category';
        error_log("‚ùå Missing required fields: " . implode(', ', $missing));
        throw new Exception('Missing required fields: ' . implode(', ', $missing));
    }
    if (!is_numeric($price) || !is_numeric($quantity)) {
        error_log("‚ùå Invalid numeric values - Price: '{$price}', Quantity: '{$quantity}'");
        throw new Exception('Price and quantity must be numeric');
    }

    // Temporarily disable image upload to test core functionality
    // $imagePath = null;
    // try {
    //     $imagePath = handleImageUpload($vendorId, true); // Make image optional
    // } catch (Exception $e) {
    //     // Log the image upload error but don't fail the product creation
    //     error_log("Image upload failed (continuing without image): " . $e->getMessage());
    //     $imagePath = null;
    // }

    $imagePath = null;

    if (isset($_FILES['images']) && $_FILES['images']['error'] === UPLOAD_ERR_OK) {
        $uploadDir = '/assets/images/user-uploads/';
        $uploadPath = $_SERVER['DOCUMENT_ROOT'] . $uploadDir;

        if (!file_exists($uploadPath)) {
            mkdir($uploadPath, 0775, true); // ensure directory exists
        }

        $filename = uniqid('img_', true) . '.' . pathinfo($_FILES['images']['name'], PATHINFO_EXTENSION);
        $targetFile = $uploadPath . $filename;

        $fileType = strtolower(pathinfo($targetFile, PATHINFO_EXTENSION));
        $allowedTypes = ['jpg', 'jpeg', 'png', 'webp'];

        if (in_array($fileType, $allowedTypes)) {
            if (move_uploaded_file($_FILES['images']['tmp_name'], $targetFile)) {
                $imagePath = $uploadDir . $filename; // store relative path for DB
            }
        }
    }

    // if you don't have categories_id in UI, you may want to resolve it here.
    if (!$categoriesId) {
        // Look up category ID by name
        try {
            $categoriesId = resolveCategoryIdByName($db, $category);
            error_log("‚úÖ Category resolved successfully: '{$category}' -> {$categoriesId}");
        } catch (Exception $e) {
            error_log("‚ùå Category resolution failed for '{$category}': " . $e->getMessage());
            
            // Enhanced fallback logic with better error handling
            try {
                $categoriesId = getDefaultCategoryId($db);
                error_log("‚úÖ Using fallback category ID: {$categoriesId}");
            } catch (Exception $fallbackError) {
                error_log("‚ùå Fallback category also failed: " . $fallbackError->getMessage());
                
                // Final attempt: Check if any categories exist at all
                $categoryCount = $db->query("SELECT COUNT(*) FROM categories")->fetchColumn();
                if ($categoryCount == 0) {
                    throw new Exception("No categories exist in database. Please run database seeder or contact administrator.");
                } else {
                    throw new Exception("Category '{$category}' not found. Available categories can be viewed in admin panel.");
                }
            }
        }
    }

    error_log("‚úÖ Attempting to insert product into database...");
    
    $sql = "INSERT INTO listings (vendor_id, categories_id, title, description, category, price, quantity, is_active, publish_date, item_image)
            VALUES (:vendor, :cat_id, :title, :description, :category, :price, :quantity, :active, :publish_date, :item_image)
            RETURNING listing_id";

    $stmt = $db->prepare($sql);
    $stmt->execute([
        'vendor'       => $vendorId,
        'cat_id'       => $categoriesId,
        'title'        => $title,
        'description'  => $description,
        'category'     => $category,
        'price'        => (float)$price,
        'quantity'     => (int)$quantity,
        'active'       => $status,
        'publish_date' => $publishDate,
        'item_image'   => $imagePath,
    ]);

    $id = $stmt->fetchColumn();
    
    error_log("üéâ Product created successfully with ID: {$id}");

    return [
        'success' => true,
        'message' => 'Product created successfully',
        'id'      => $id,
    ];
}

function readProduct(PDO $db, string $id, ?string $vendorId = null): array
{
    $stmt = $db->prepare("SELECT * FROM listings WHERE listing_id = :id AND vendor_id = :vid LIMIT 1");
    $stmt->execute(['id' => $id, 'vid' => $vendorId]);
    $row = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$row) {
        http_response_code(404);
        return ['success' => false, 'message' => 'Product not found'];
    }

    return ['success' => true, 'product' => $row];
}

function listProducts(PDO $db, string $vendorId): array
{
    // filters
    $search   = trim($_GET['search'] ?? '');
    $category = trim($_GET['category'] ?? '');
    $status   = $_GET['status'] ?? 'all';

    // pagination
    $page     = max(1, (int)($_GET['page'] ?? 1));
    $limit    = min(100, max(1, (int)($_GET['limit'] ?? 20)));
    $offset   = ($page - 1) * $limit;

    $where   = ["vendor_id = :vid"];
    $params  = ['vid' => $vendorId];

    if ($search !== '') {
        $where[] = "(LOWER(title) LIKE :search OR LOWER(description) LIKE :search)";
        $params['search'] = '%' . strtolower($search) . '%';
    }

    if ($category !== '') {
        $where[] = "LOWER(category) = :category";
        $params['category'] = strtolower($category);
    }

    if ($status !== 'all') {
        $where[] = "is_active = :active";
        $params['active'] = ($status === 'active');
    }

    $whereSql = implode(' AND ', $where);

    $totalStmt = $db->prepare("SELECT COUNT(*) FROM listings WHERE $whereSql");
    $totalStmt->execute($params);
    $total = (int)$totalStmt->fetchColumn();

    $sql = "SELECT * FROM listings WHERE $whereSql ORDER BY publish_date DESC LIMIT :limit OFFSET :offset";
    $stmt = $db->prepare($sql);

    foreach ($params as $k => $v) {
        $stmt->bindValue(':' . $k, $v);
    }
    $stmt->bindValue(':limit', $limit, PDO::PARAM_INT);
    $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);

    $stmt->execute();
    $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return [
        'success'   => true,
        'data'      => $rows,
        'page'      => $page,
        'limit'     => $limit,
        'total'     => $total,
        'totalPages'=> (int)ceil($total / $limit),
    ];
}

function updateProduct(PDO $db, string $vendorId): array
{
    $id = $_POST['id'] ?? null;
    if (!$id) throw new Exception('Missing id');

    // Ensure ownership
    if (!ownsProduct($db, $id, $vendorId)) {
        http_response_code(403);
        return ['success' => false, 'message' => 'Forbidden'];
    }

    // üîç Fetch current image path before updating
    $stmt = $db->prepare("SELECT item_image FROM listings WHERE listing_id = :id");
    $stmt->execute(['id' => $id]);
    $existing = $stmt->fetch(PDO::FETCH_ASSOC);
    $oldImage = $existing['item_image'] ?? null;

    $title        = trim($_POST['title'] ?? '');
    $description  = trim($_POST['description'] ?? '');
    $category     = trim($_POST['category'] ?? '');
    $price        = $_POST['price'] ?? null;
    $quantity     = $_POST['stock'] ?? $_POST['quantity'] ?? null;
    $categoriesId = $_POST['categories_id'] ?? null;

    // Fix boolean handling for status
    $isActive = null;
    if (isset($_POST['status'])) {
        $statusValue = $_POST['status'];
        $isActive = ($statusValue === 'active' || $statusValue === '1' || $statusValue === 'true');
    }

    $fields = [];
    $params = ['id' => $id];

    if ($title !== '')         { $fields[] = "title = :title";                $params['title']        = $title; }
    if ($description !== '')   { $fields[] = "description = :description";    $params['description']  = $description; }
    if ($category !== '')      { $fields[] = "category = :category";          $params['category']     = $category; }
    if ($categoriesId !== null){ $fields[] = "categories_id = :categories_id";$params['categories_id']= $categoriesId; }
    if ($price !== null)       { if (!is_numeric($price)) throw new Exception('Invalid price');
                                 $fields[] = "price = :price";                $params['price']        = (float)$price; }
    if ($quantity !== null)    { if (!is_numeric($quantity)) throw new Exception('Invalid quantity');
                                 $fields[] = "quantity = :quantity";          $params['quantity']     = (int)$quantity; }
    if ($isActive !== null)    { $fields[] = "is_active = :active";           $params['active']       = $isActive; }

    // Handle new image upload
    $newImage = handleImageUpload($vendorId, true);
    if ($newImage) {
        $fields[] = "item_image = :item_image";
        $params['item_image'] = $newImage;

        $uploadBase = realpath($_SERVER['DOCUMENT_ROOT'] . '/assets/images/user-uploads');
        $fullPath = realpath($_SERVER['DOCUMENT_ROOT'] . $oldImage);

        // üóëÔ∏è Delete old image if exists and is not empty
        if ($oldImage && file_exists($_SERVER['DOCUMENT_ROOT'] . $oldImage)) {
            unlink($_SERVER['DOCUMENT_ROOT'] . $oldImage);
        }
    }

    if (empty($fields)) {
        return ['success' => true, 'message' => 'Nothing to update'];
    }

    $sql = "UPDATE listings SET " . implode(", ", $fields) . " WHERE listing_id = :id";
    $stmt = $db->prepare($sql);
    $stmt->execute($params);

    return ['success' => true, 'message' => 'Product updated successfully'];
}

function deleteProduct(PDO $db, string $id, string $vendorId): array
{
    if (!ownsProduct($db, $id, $vendorId)) {
        http_response_code(403);
        return ['success' => false, 'message' => 'Forbidden'];
    }

    try {
        $db->beginTransaction();

        // Fetch the image path before deletion
        $imgStmt = $db->prepare("SELECT item_image FROM listings WHERE listing_id = :id");
        $imgStmt->execute(['id' => $id]);
        $imagePath = $imgStmt->fetchColumn();

        // Delete from cart
        $cartStmt = $db->prepare("DELETE FROM cart WHERE listing_id = :id");
        $cartStmt->execute(['id' => $id]);

        // Delete from listings
        $stmt = $db->prepare("DELETE FROM listings WHERE listing_id = :id");
        $stmt->execute(['id' => $id]);

        // Commit DB deletion
        $db->commit();

        // Try to delete image from file system if it exists
        if ($imagePath) {
            $fullPath = $_SERVER['DOCUMENT_ROOT'] . $imagePath;
            if (file_exists($fullPath)) {
                unlink($fullPath); // Delete file
                error_log("üóëÔ∏è Deleted image file: {$fullPath}");
            } else {
                error_log("‚ö†Ô∏è Image file not found at: {$fullPath}");
            }
        }

        return ['success' => true, 'message' => 'Product and image deleted successfully'];

    } catch (Exception $e) {
        $db->rollBack();
        error_log("Error deleting product {$id}: " . $e->getMessage());
        return ['success' => false, 'message' => 'Failed to delete product: ' . $e->getMessage()];
    }
}

function toggleProduct(PDO $db, string $vendorId): array
{
    $id = $_POST['id'] ?? null;
    if (!$id) throw new Exception('Missing id');

    if (!ownsProduct($db, $id, $vendorId)) {
        http_response_code(403);
        return ['success' => false, 'message' => 'Forbidden'];
    }

    $stmt = $db->prepare("UPDATE listings SET is_active = NOT is_active WHERE listing_id = :id RETURNING is_active");
    $stmt->execute(['id' => $id]);
    $newState = $stmt->fetchColumn();

    return [
        'success' => true,
        'message' => 'Product status toggled',
        'active'  => (bool)$newState
    ];
}

function duplicateProduct(PDO $db, string $vendorId): array
{
    $id = $_POST['id'] ?? null;
    if (!$id) throw new Exception('Missing id');

    if (!ownsProduct($db, $id, $vendorId)) {
        http_response_code(403);
        return ['success' => false, 'message' => 'Forbidden'];
    }

    $stmt = $db->prepare("SELECT * FROM listings WHERE listing_id = :id");
    $stmt->execute(['id' => $id]);
    $row = $stmt->fetch(PDO::FETCH_ASSOC);
    if (!$row) throw new Exception('Product not found');

    $stmt = $db->prepare("
        INSERT INTO listings (vendor_id, categories_id, title, description, category, price, quantity, is_active, publish_date, item_image)
        VALUES (:vendor, :cat_id, :title, :description, :category, :price, :quantity, :active, :publish_date, :item_image)
        RETURNING listing_id
    ");
    $stmt->execute([
        'vendor'       => $row['vendor_id'],
        'cat_id'       => $row['categories_id'],
        'title'        => $row['title'] . ' (Copy)',
        'description'  => $row['description'],
        'category'     => $row['category'],
        'price'        => $row['price'],
        'quantity'     => $row['quantity'],
        'active'       => $row['is_active'],
        'publish_date' => date('Y-m-d'),
        'item_image'   => $row['item_image'],
    ]);

    $newId = $stmt->fetchColumn();

    return [
        'success' => true,
        'message' => 'Product duplicated successfully',
        'id'      => $newId
    ];
}

function ownsProduct(PDO $db, string $listingId, string $vendorId): bool
{
    $stmt = $db->prepare("SELECT 1 FROM listings WHERE listing_id = :id AND vendor_id = :vid");
    $stmt->execute(['id' => $listingId, 'vid' => $vendorId]);
    return (bool)$stmt->fetchColumn();
}

/**
 * Returns stored relative path or null
 */
function handleImageUpload(string $vendorId, bool $optional = false): ?string
{
    if (
        !isset($_FILES['images']) &&
        !isset($_FILES['image']) &&
        $optional
    ) {
        return null;
    }

    $fileArray = null;

    if (isset($_FILES['images'])) {
        // Take first only (schema supports single path)
        if (is_array($_FILES['images']['name'])) {
            // multiple
            $fileArray = [
                'name'     => $_FILES['images']['name'][0] ?? null,
                'type'     => $_FILES['images']['type'][0] ?? null,
                'tmp_name' => $_FILES['images']['tmp_name'][0] ?? null,
                'error'    => $_FILES['images']['error'][0] ?? UPLOAD_ERR_NO_FILE,
                'size'     => $_FILES['images']['size'][0] ?? 0,
            ];
        } else {
            // single input named images
            $fileArray = $_FILES['images'];
        }
    } elseif (isset($_FILES['image'])) {
        $fileArray = $_FILES['image'];
    }

    if (!$fileArray || $fileArray['error'] === UPLOAD_ERR_NO_FILE) {
        if ($optional) return null;
        throw new Exception('Image is required');
    }

    if ($fileArray['error'] !== UPLOAD_ERR_OK) {
        if ($optional) {
            error_log("Image upload error (optional): " . $fileArray['error']);
            return null; // For optional uploads, return null instead of throwing
        }
        throw new Exception('Image upload failed');
    }

    // Additional validation: check if temp file exists and is valid
    if (empty($fileArray['tmp_name']) || !is_uploaded_file($fileArray['tmp_name'])) {
        if ($optional) {
            error_log("Invalid temporary file for optional upload");
            return null;
        }
        throw new Exception('Invalid uploaded file');
    }

    $allowed = ['image/jpeg' => 'jpg', 'image/png' => 'png', 'image/webp' => 'webp'];
    if (!isset($allowed[$fileArray['type']])) {
        throw new Exception('Unsupported image type');
    }

    if ($fileArray['size'] > 3 * 1024 * 1024) {
        throw new Exception('Image exceeds 3MB');
    }

    $ext = $allowed[$fileArray['type']];
    $name = bin2hex(random_bytes(16)) . '.' . $ext;

    // Robust directory setup with multiple fallbacks
    $uploadsDir = dirname(__DIR__) . '/assets/images/user-uploads';
    
    // Ensure the base upload directory exists
    if (!is_dir($uploadsDir)) {
        error_log("Creating user-uploads directory: {$uploadsDir}");
        if (!mkdir($uploadsDir, 0755, true)) {
            error_log("Failed to create user-uploads directory, trying alternative");
            // Fallback to main images directory
            $uploadsDir = dirname(__DIR__) . '/assets/images';
            if (!is_dir($uploadsDir)) {
                throw new Exception('No suitable upload directory available');
            }
        } else {
            // Set proper permissions
            chmod($uploadsDir, 0755);
            
            // Create security .htaccess file
            $htaccessPath = $uploadsDir . '/.htaccess';
            if (!file_exists($htaccessPath)) {
                $htaccessContent = "# Prevent execution of uploaded PHP files\n<Files *.php>\n    Deny from all\n</Files>\n<Files *.phtml>\n    Deny from all\n</Files>\n";
                file_put_contents($htaccessPath, $htaccessContent);
            }
            
            error_log("Successfully created user-uploads directory: {$uploadsDir}");
        }
    }

    // Verify directory is writable
    if (!is_writable($uploadsDir)) {
        error_log("Upload directory is not writable: {$uploadsDir}");
        // Try to fix permissions
        if (!chmod($uploadsDir, 0755)) {
            throw new Exception('Upload directory is not writable and permissions cannot be fixed');
        }
        error_log("Fixed permissions for upload directory: {$uploadsDir}");
    }

    // Create vendor-specific subdirectory with proper error handling
    $vendorPrefix = 'vendor-' . substr($vendorId, 0, 8);
    $vendorDir = $uploadsDir . '/' . $vendorPrefix;
    
    if (!is_dir($vendorDir)) {
        error_log("Creating vendor directory: {$vendorDir}");
        if (!mkdir($vendorDir, 0755, true)) {
            error_log("Could not create vendor directory: {$vendorDir}");
            // Fallback: use main uploads directory with vendor prefix in filename
            $dest = $uploadsDir . '/' . $vendorPrefix . '-' . $name;
            
            error_log("Using fallback upload path: {$dest}");
            
            // Final safety check before moving file
            if (!is_uploaded_file($fileArray['tmp_name'])) {
                error_log("Security check failed: File was not uploaded via HTTP POST");
                throw new Exception('Security check failed: Invalid upload');
            }
            
            if (!move_uploaded_file($fileArray['tmp_name'], $dest)) {
                error_log("Failed to move uploaded file from {$fileArray['tmp_name']} to {$dest}");
                error_log("Source file exists: " . (file_exists($fileArray['tmp_name']) ? 'yes' : 'no'));
                error_log("Destination directory writable: " . (is_writable($uploadsDir) ? 'yes' : 'no'));
                error_log("Destination directory permissions: " . substr(sprintf('%o', fileperms($uploadsDir)), -4));
                throw new Exception('Failed to move uploaded image to fallback location');
            }
            
            // Return relative path for direct upload
            $relative = "/assets/images/user-uploads/" . $vendorPrefix . '-' . $name;
            if (strpos($uploadsDir, 'user-uploads') === false) {
                $relative = "/assets/images/" . $vendorPrefix . '-' . $name;
            }
            
            error_log("Image uploaded successfully (fallback): {$dest} -> {$relative}");
            return $relative;
        } else {
            chmod($vendorDir, 0755);
            error_log("Successfully created vendor directory: {$vendorDir}");
        }
    }

    // Verify vendor directory is writable
    if (!is_writable($vendorDir)) {
        error_log("Vendor directory is not writable: {$vendorDir}");
        if (!chmod($vendorDir, 0755)) {
            error_log("Could not fix vendor directory permissions");
            throw new Exception('Vendor upload directory is not writable');
        }
        error_log("Fixed vendor directory permissions: {$vendorDir}");
    }

    $dest = $vendorDir . '/' . $name;

    // Final safety check before moving file
    if (!is_uploaded_file($fileArray['tmp_name'])) {
        error_log("Security check failed: File was not uploaded via HTTP POST");
        throw new Exception('Security check failed: Invalid upload');
    }

    if (!move_uploaded_file($fileArray['tmp_name'], $dest)) {
        error_log("Failed to move uploaded file from {$fileArray['tmp_name']} to {$dest}");
        error_log("Source file exists: " . (file_exists($fileArray['tmp_name']) ? 'yes' : 'no'));
        error_log("Destination directory writable: " . (is_writable($vendorDir) ? 'yes' : 'no'));
        throw new Exception('Failed to move uploaded image');
    }

    // Return relative path for web serving
    if (strpos($vendorDir, 'user-uploads') !== false) {
        $relative = "/assets/images/user-uploads/" . $vendorPrefix . '/' . $name;
    } else {
        $relative = "/assets/images/" . $vendorPrefix . '/' . $name;
    }
    
    error_log("Image uploaded successfully: $dest -> $relative");
    return $relative;
}

/**
 * Enhanced fallback category ID function
 * Tries to get a reasonable default category, preferably "General Equipment"
 */
function getDefaultCategoryId(PDO $db): string
{
    error_log("üîÑ Getting default category ID...");
    
    // Try to get "General Equipment" as the most generic category
    $preferredDefaults = ['General Equipment', 'Other', 'Miscellaneous', 'General'];
    
    foreach ($preferredDefaults as $preferred) {
        $stmt = $db->prepare("SELECT categories_id FROM categories WHERE LOWER(name) = LOWER(:name) LIMIT 1");
        $stmt->execute(['name' => $preferred]);
        $id = $stmt->fetchColumn();
        
        if ($id) {
            error_log("‚úÖ Using preferred default category: '{$preferred}' -> {$id}");
            return $id;
        }
    }
    
    // If no preferred default found, get the first available category
    $stmt = $db->query("SELECT categories_id, name FROM categories ORDER BY name LIMIT 1");
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$result) {
        error_log("üí• CRITICAL: No categories exist in database at all!");
        throw new Exception('No categories available. Database needs to be seeded with categories.');
    }
    
    error_log("‚úÖ Using first available category as default: '{$result['name']}' -> {$result['categories_id']}");
    return $result['categories_id'];
}

function resolveCategoryIdByName(PDO $db, string $categoryName): string
{
    error_log("üîç Resolving category: '{$categoryName}'");
    
    // Look up category ID by exact name match
    $stmt = $db->prepare("SELECT categories_id FROM categories WHERE LOWER(name) = LOWER(:name) LIMIT 1");
    $stmt->execute(['name' => trim($categoryName)]);
    $id = $stmt->fetchColumn();
    
    if (!$id) {
        // Enhanced debugging: Log all available categories
        error_log("‚ùå Category '{$categoryName}' not found. Checking available categories...");
        
        $availableStmt = $db->query("SELECT name FROM categories ORDER BY name");
        $available = $availableStmt->fetchAll(PDO::FETCH_COLUMN);
        
        if (empty($available)) {
            error_log("üí• CRITICAL: No categories exist in database at all!");
            throw new Exception("No categories exist in database. Database may need to be seeded.");
        } else {
            error_log("üìã Available categories (" . count($available) . "): " . implode(', ', $available));
            error_log("üîç Requested category: '{$categoryName}'");
            
            // Try to find similar category names
            $similar = [];
            foreach ($available as $availableCat) {
                if (stripos($availableCat, $categoryName) !== false || stripos($categoryName, $availableCat) !== false) {
                    $similar[] = $availableCat;
                }
            }
            
            if (!empty($similar)) {
                error_log("üéØ Similar categories found: " . implode(', ', $similar));
                throw new Exception("Category '{$categoryName}' not found. Did you mean: " . implode(', ', $similar) . "?");
            } else {
                throw new Exception("Category '{$categoryName}' not found. Available: " . implode(', ', array_slice($available, 0, 5)) . (count($available) > 5 ? '...' : ''));
            }
        }
    }
    
    error_log("‚úÖ Category resolved successfully: '{$categoryName}' -> {$id}");
    return $id;
}
